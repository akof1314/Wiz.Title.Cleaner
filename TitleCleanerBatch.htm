<html>
<head>
    <title>Title Cleaner Batch</title>
	<meta http-equiv="content-type" content="text/html; charset=UTF-8">
    <link rel="stylesheet" href="zTree/css/demo.css" type="text/css">
	<link rel="stylesheet" href="zTree/css/zTreeStyle/zTreeStyle.css" type="text/css">
	<script type="text/javascript" src="zTree/js/jquery-1.4.4.min.js"></script>
	<script type="text/javascript" src="zTree/js/jquery.ztree.core-3.5.min.js"></script>
	<SCRIPT type="text/javascript">
		<!--
		var setting = {
			view: {
				fontCss: getTreeNodeFont
			}
		};

		var zNodes =[
		];

		var zTreeObj = null;
		var objApp = window.external;
		var objCommon = null;
		var objDatabase = null;
		var objWindow = null;
		var strPluginPath = "";
		var strBlackListPath = "";
		var strLanguangePath = "";
		var arrBlackList = null;

		$(document).ready(function(){
			strPluginPath = objApp.GetPluginPathByScriptFileName("TitleCleaner.js");
			strBlackListPath = strPluginPath + "BlackList.txt";
			strLanguangePath = strPluginPath + "plugin.ini";
			objCommon = objApp.CreateWizObject("WizKMControls.WizCommonUI");
			objDatabase = objApp.Database;
			objWindow = objApp.Window;
			$("#rulenameBlackList").val(strBlackListPath);
		});

		function previewTitleCleaner () {
			getBlackList();
			zNodes = [];
			addChildDocs(objDatabase, zNodes);

			zTreeObj = $.fn.zTree.init($("#treeDemo"), setting, zNodes);
			$("#buttonDo").removeAttr("disabled");
		}

		function doTitleCleaner () {
			if (zNodes.length == 0 || zTreeObj == null) {
				objWindow.ShowMessage(objApp.LoadStringFromFile(strLanguangePath, "strNoNeedCleanerName"), "{p}", 0x00000040);
				return;
			};

			if (6 != objWindow.ShowMessage(objApp.LoadStringFromFile(strLanguangePath, "strSureDoCleanerName"), "{p}", 0x04 + 0x20)) {
                return;
            }

            var modifyOk = false;
            var nodesDoc = zTreeObj.getNodesByParam("wizTitle", true, null);
            if (nodesDoc) {
            	for (var i = 0; i < nodesDoc.length; i++) {
            		var objDocument = objDatabase.DocumentFromGUID(nodesDoc[i]["wizGUID"]);
            		if (objDocument) {
            			objDocument.Title = nodesDoc[i]["name"];
            			modifyOk = true;
            		};
            	};
            };

            if (modifyOk) {
				objWindow.ShowMessage(objApp.LoadStringFromFile(strLanguangePath, "strDoCleanerOKName"), "{p}", 0x00000040);
				previewTitleCleaner();
            } else{
				objWindow.ShowMessage(objApp.LoadStringFromFile(strLanguangePath, "strDoCleanerFailedName"), "{p}", 0x00000040);
            };
		}

		function addChildDocs(parentFolder, parentNode) {
			var childrenFolders = parentFolder.Folders;
			if (childrenFolders){
				for (var i = 0; i < childrenFolders.Count; i++) {
					var childrenFolder = childrenFolders.Item(i);

					var childrenNode = [];
					if (addChildDocs(childrenFolder, childrenNode)) {
						parentNode.push({
							name:childrenFolder.GetDisplayName(0),
						  	icon:getIconFileRealPath(childrenFolder.GetIconFileName()),
						  	open:true,
						  	children:childrenNode
						});
					}
				}
			}

			var childrenDocs = parentFolder.Documents;
			if (childrenDocs){
				for (var i = 0; i < childrenDocs.Count; i++) {
					var childrenDoc = childrenDocs.Item(i);
					var childrenDocTitle = childrenDoc.Title;

					for (var j = 0; j < arrBlackList.length; j++) {
						childrenDocTitle = childrenDocTitle.replace(new RegExp(arrBlackList[j][0], "gi"), arrBlackList[j][1]);
					};

					if (childrenDocTitle != childrenDoc.Title) {
						parentNode.push({
							name:childrenDoc.Title,
							icon:getIconFileRealPath(childrenDoc.GetIconFileName())
						});

						parentNode.push({
							name:childrenDocTitle,
							font:{'color':'blue'},
							iconSkin:"newtitle",
							wizGUID:childrenDoc.GUID,
							wizTitle:true
						});
					};
				}
			}
			return parentNode.length > 0;
		}

		function getTreeNodeFont(treeId, node) {
			return node.font ? node.font : {};
		}

		function getIconFileRealPath (fileName) {
			return fileName.replace(/\\/g, "/").replace(/ /g, "%20");
		}

		function getBlackList () {
			arrBlackList = [];
			var arrList = objCommon.LoadTextFromFile(strBlackListPath).split("\n");
			for (var i = 0; i < arrList.length; i++) {
				var arrItem = arrList[i].split('^^');
				if (arrItem.length == 1) {
					arrItem.push("");
				};

				arrBlackList.push(arrItem);
			};
		}

		//-->
	</SCRIPT>
	<style type="text/css">
		.ztree li span.button.newtitle_ico_docu{margin-right:2px; background-position:-126px -48px; vertical-align:top; *vertical-align:middle}
	</style>
    </htad>
    <body>
    <!-- <div style="width:100%;height:100%;display:block;background:url(zTree/css/zTreeStyle/img/loading.gif) center center no-repeat;"></div> -->
	<table style="width:100%;height:100%;table-layout:fixed;padding: 10px;">
        <tr>
			<td colspan="2" >
				规则文件: <input id="rulenameBlackList" type="text" readonly="true" name="rulename" style="width:70%;"/>
			</td>
            <td align="right">
				<input id="buttonPreview" type="button" value="预览" onclick="previewTitleCleaner();" style="width: 70px; padding-top:3px;" />
				<input id="buttonDo" type="button" disabled="disabled" value="清理" onclick="doTitleCleaner();" style="width: 70px; padding-top:3px;" />
			</td>
        </tr>
		<tr>
            <td colspan="3" style="width:100%;height:100%;">
				<ul id="treeDemo" class="ztree"></ul>
            </td>
        </tr>
    </table>
    </body>
</html>
